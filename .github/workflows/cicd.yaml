# .github/workflows/cicd.yml

# - push to ECR  ---  done
# - Run the container on EC2/ECS   ---

name: cicd pipeline
on:
  push:
    branches:
      - main
    paths:                # if any changes detected in below dir then runner'll trigger cicd pipeline
      - ./src/**
      - .github/**
      - ./prod/**
      - Dockerfile
      - docker_requirements.txt
  pull_request: 
    branches:
      - main

jobs:
  pull-latest-model:   
    name: pull latest prod model         
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Utilities     # install utilities required to fetch model from backend
        run: |
            python -m pip install --upgrade pip
            if [ -f model_requirements.txt ]; then pip install -r model_requirements.txt; fi 

      - name: Pull Latest Model From Mlflow   # below script will executed and fetch the prod model
        run: |
          python ./prod/mlflowdb.py ${{ secrets.TRACKING_URI }}
      
      - name: Upload Model Artifact            # save the artifacts so that we can utilise it in next stage     
        uses: actions/upload-artifact@v2
        with:
          name: model
          # in path give correct repository name as here "cicd-aws/cicd-aws" 
          path: | 
            /home/runner/work/cicd-aws/cicd-aws/model.joblib    
            /home/runner/work/cicd-aws/cicd-aws/model_details.json

      - name: Print Current Directory          # for debuging purpoer, u can remove it
        run: ls /home/runner/work/cicd-aws/cicd-aws

  build-nd-push-docker-image:  
    name: build & push img to ECR   
    needs: pull-latest-model      # previous stage must be successfully completed (job dependency)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Print Current Directory be-down       # for debug purpose
        run: ls /home/runner/work/cicd-aws/cicd-aws

      - name: Download Model Artifacts           # download the previously saved artifacts
        uses: actions/download-artifact@v2
        with:
          name: model
          path: /home/runner/work/cicd-aws/cicd-aws
      
      - name: Print Current Directory af-down     # for debugging
        run: ls /home/runner/work/cicd-aws/cicd-aws

      # push img to ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        # we can use the "needs" attribute to specify dependencies between steps or jobs based on their IDs. 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2     # pre-defined action

      - name: Build, Tag, and Push Image to AWS ECR
        id: build-image
        env:
          # previous step k o/p ko read krne ka tarika
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}     # registry == URI
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  continuous-deployment:
    name: continuous deployment
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    needs: build-nd-push-docker-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4     # if getting some issues then must check latest version  
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull Latest Images
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Delete Previous Container
        run: |
          docker rm -f awscicd || true

      - name: Run Docker Image to Serve Users
        run: |
          docker run -d -p 8081:8000 --ipc="host" --name=awscicd -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      